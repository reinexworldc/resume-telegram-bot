import logging
import aiohttp
import json

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –º–æ–¥—É–ª—å, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
try:
    from src import config
except ImportError:
    import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def check_resume_with_ai(message: str) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é DeepSeek AI.
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        Tuple[bool, str]: (–æ–¥–æ–±—Ä–µ–Ω–æ –ª–∏ —Ä–µ–∑—é–º–µ, –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö—ç—à—Ç–µ–≥–∞ #—Ä–µ–∑—é–º–µ
    if "#—Ä–µ–∑—é–º–µ" not in message.lower():
        return False, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö—ç—à—Ç–µ–≥ #—Ä–µ–∑—é–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö—ç—à—Ç–µ–≥ #—Ä–µ–∑—é–º–µ –≤ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ DeepSeek AI
    prompt = f"""
    –ü—Ä–æ–≤–µ—Ä—å —Å–ª–µ–¥—É—é—â–µ–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
    1. –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ (–∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    3. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–∑—é–º–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö—ç—à—Ç–µ–≥ #—Ä–µ–∑—é–º–µ
    
    –†–µ–∑—é–º–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
    {message}
    
    –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ —É–∫–∞–∂–∏, –æ–¥–æ–±—Ä–µ–Ω–æ –ª–∏ —Ä–µ–∑—é–º–µ (–¥–∞/–Ω–µ—Ç).
    –ï—Å–ª–∏ —Ä–µ–∑—é–º–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–æ, –æ–±—ä—è—Å–Ω–∏ –ø—Ä–∏—á–∏–Ω—ã –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é.
    """
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {config.DEEPSEEK_API_KEY}"
    }
    
    payload = {
        "model": config.DEEPSEEK_MODEL,
        "messages": [
            {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—é–º–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é, –≥—Ä–∞–º–º–∞—Ç–∏–∫—É, —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(config.DEEPSEEK_API_URL, headers=headers, json=payload) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ API DeepSeek: {response.status} - {error_text}")
                    return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—é–º–µ: {response.status}"
                
                result = await response.json()
                ai_response = result.get("choices", [{}])[0].get("message", {}).get("content", "")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI
                is_approved = "–æ–¥–æ–±—Ä–µ–Ω–æ: –¥–∞" in ai_response.lower() or "—Ä–µ–∑—é–º–µ –æ–¥–æ–±—Ä–µ–Ω–æ" in ai_response.lower()
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                report = f"üìã –û—Ç—á–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—é–º–µ:\n\n{ai_response}"
                
                return is_approved, report
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek AI: {str(e)}")
        return False, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—é–º–µ: {str(e)}" 