import logging
import aiohttp
import json
import re
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –º–æ–¥—É–ª—å, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
try:
    from src import config
except ImportError:
    try:
        import config
    except ImportError as e:
        print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è config: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –±–æ—Ç–∞ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ src")
        sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_resume_locally(message: str) -> tuple[bool, str]:
    """
    –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—é–º–µ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö API.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ö—ç—à—Ç–µ–≥–∞ #—Ä–µ–∑—é–º–µ –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Ä–µ–∑—é–º–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—á–µ–Ω—å –ª–æ—è–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏.
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        Tuple[bool, str]: (–û–¥–æ–±—Ä–µ–Ω–æ/–û—Ç–∫–ª–æ–Ω–µ–Ω–æ, –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)
    """
    message_lower = message.lower()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö—ç—à—Ç–µ–≥–∞ #—Ä–µ–∑—é–º–µ
    if "#—Ä–µ–∑—é–º–µ" not in message_lower:
        return False, "‚ùå –†–µ–∑—é–º–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ö—ç—à—Ç–µ–≥ #—Ä–µ–∑—é–º–µ"
    
    # –°–ª–æ–≤–∞—Ä—å —Ä–∞–∑–¥–µ–ª–æ–≤ —Ä–µ–∑—é–º–µ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    resume_sections = {
        "–æ–ø—ã—Ç": ["–æ–ø—ã—Ç", "—Å—Ç–∞–∂", "—Ä–∞–±–æ—Ç–∞–ª", "—Ä–∞–±–æ—Ç–∞—é", "–ª–µ—Ç –æ–ø—ã—Ç–∞", "—Ä–∞–±–æ—Ç–∞", "–¥–æ–ª–∂–Ω–æ—Å—Ç—å", "–∫–æ–º–ø–∞–Ω–∏—è", "–ø—Ä–æ–µ–∫—Ç", "–∑–∞–Ω–∏–º–∞–ª—Å—è", "–¥–µ–ª–∞–ª"],
        "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": ["–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "—É—á–∏–ª—Å—è", "–æ–∫–æ–Ω—á–∏–ª", "–¥–∏–ø–ª–æ–º", "–∫—É—Ä—Å—ã", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–∏–Ω—Å—Ç–∏—Ç—É—Ç", "—à–∫–æ–ª–∞", "–∫–æ–ª–ª–µ–¥–∂", "–≤—É–∑", "—Å—Ç–µ–ø–µ–Ω—å", "—É—á–µ–±–∞"],
        "–Ω–∞–≤—ã–∫–∏": ["–Ω–∞–≤—ã–∫–∏", "—É–º–µ–Ω–∏—è", "–≤–ª–∞–¥–µ—é", "–∑–Ω–∞—é", "—Ä–∞–±–æ—Ç–∞—é —Å", "–∏—Å–ø–æ–ª—å–∑—É—é", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "—è–∑—ã–∫–∏", "—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏", "–±–∏–±–ª–∏–æ—Ç–µ–∫–∏", "—É–º–µ—é"],
        "–∫–æ–Ω—Ç–∞–∫—Ç—ã": ["–∫–æ–Ω—Ç–∞–∫—Ç—ã", "—Å–≤—è–∑—å", "—Ç–µ–ª–µ—Ñ–æ–Ω", "email", "–ø–æ—á—Ç–∞", "@", "telegram", "–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ", "linkedin", "—Ç–≥", "—Å–≤—è–∑–∞—Ç—å—Å—è", "–Ω–æ–º–µ—Ä"]
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    found_sections = set()
    missing_sections = []
    
    for section, keywords in resume_sections.items():
        for keyword in keywords:
            if keyword in message_lower:
                found_sections.add(section)
                break
        
        if section not in found_sections:
            missing_sections.append(section)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Ä–µ–∑—é–º–µ - —Å–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–æ 20 —Å–ª–æ–≤
    if len(message.split()) < 20:
        return False, "‚ùå –†–µ–∑—é–º–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –†–µ–∑—é–º–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 20 —Å–ª–æ–≤."
    
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–µ–Ω–µ–µ 2 —Ä–∞–∑–¥–µ–ª–æ–≤, —Å—á–∏—Ç–∞–µ–º —Ä–µ–∑—é–º–µ –Ω–µ–ø–æ–ª–Ω—ã–º (—Å–Ω–∏–∂–∞–µ–º —Å 3 –¥–æ 2)
    if len(found_sections) < 2:
        missing_sections_str = ", ".join(missing_sections)
        return False, f"‚ùå –†–µ–∑—é–º–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã: {missing_sections_str}."
    
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã, –Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è, –¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if missing_sections:
        missing_sections_str = ", ".join(missing_sections)
        return True, f"‚úÖ –†–µ–∑—é–º–µ –æ–¥–æ–±—Ä–µ–Ω–æ! –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å: {missing_sections_str}."
    
    return True, "‚úÖ –†–µ–∑—é–º–µ –æ–¥–æ–±—Ä–µ–Ω–æ! –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç."

async def check_resume_with_ai(message: str) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é X.AI (Grok).
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        Tuple[bool, str]: (–æ–¥–æ–±—Ä–µ–Ω–æ –ª–∏ —Ä–µ–∑—é–º–µ, –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö—ç—à—Ç–µ–≥–∞ #—Ä–µ–∑—é–º–µ
    if "#—Ä–µ–∑—é–º–µ" not in message.lower():
        return False, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö—ç—à—Ç–µ–≥ #—Ä–µ–∑—é–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö—ç—à—Ç–µ–≥ #—Ä–µ–∑—é–º–µ –≤ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ X.AI
    prompt = f"""
    –ü—Ä–æ–≤–µ—Ä—å —Å–ª–µ–¥—É—é—â–µ–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
    1. –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ (–∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    3. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–∑—é–º–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö—ç—à—Ç–µ–≥ #—Ä–µ–∑—é–º–µ
    
    –†–µ–∑—é–º–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
    {message}
    
    –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ —É–∫–∞–∂–∏, –æ–¥–æ–±—Ä–µ–Ω–æ –ª–∏ —Ä–µ–∑—é–º–µ (–¥–∞/–Ω–µ—Ç).
    –ï—Å–ª–∏ —Ä–µ–∑—é–º–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–æ, –æ–±—ä—è—Å–Ω–∏ –ø—Ä–∏—á–∏–Ω—ã –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é.
    """
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {config.GROK_API_KEY}"
    }
    
    payload = {
        "model": config.GROK_MODEL,
        "messages": [
            {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—é–º–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é, –≥—Ä–∞–º–º–∞—Ç–∏–∫—É, —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "stream": False
    }
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ X.AI API. URL: {config.GROK_API_URL}, –ú–æ–¥–µ–ª—å: {config.GROK_MODEL}")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(config.GROK_API_URL, headers=headers, json=payload) as response:
                response_text = await response.text()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç X.AI API. –°—Ç–∞—Ç—É—Å: {response.status}")
                
                if response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ X.AI API: {response.status} - {response_text}")
                    
                    # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                    logger.info("–ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∑—é–º–µ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API")
                    return check_resume_locally(message)
                
                try:
                    result = json.loads(response_text)
                    ai_response = result.get("choices", [{}])[0].get("message", {}).get("content", "")
                    
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç X.AI. –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI
                    is_approved = "–æ–¥–æ–±—Ä–µ–Ω–æ: –¥–∞" in ai_response.lower() or "—Ä–µ–∑—é–º–µ –æ–¥–æ–±—Ä–µ–Ω–æ" in ai_response.lower()
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                    report = f"üìã –û—Ç—á–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—é–º–µ:\n\n{ai_response}"
                    
                    return is_approved, report
                except Exception as parse_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ X.AI: {str(parse_error)}. –û—Ç–≤–µ—Ç: {response_text[:200]}...")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                    logger.info("–ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∑—é–º–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API")
                    return check_resume_locally(message)
                
    except aiohttp.ClientError as client_error:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å X.AI: {str(client_error)}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        logger.info("–ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∑—é–º–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API")
        return check_resume_locally(message)
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ X.AI: {str(e)}")
        # –ü—Ä–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        logger.info("–ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∑—é–º–µ –∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏")
        return check_resume_locally(message) 